library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library('AppliedPredictiveModeling')
library(caret)
install.packages('digest')
install.packages('ggplot')
library(caret)
install.packages('ggplot2')
library(caret)
library(ElemStatLearn)
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone<-ozone[order(ozone$ozone),]
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
modFit<-train(Species~.,data=training,method="rf,prox=TRUE")
modFit<-train(Species~.,data=training,method="rf",prox=TRUE)
data(iris)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
update.packages("ggplot2")
library(ggplot2)
install.packages('Rcpp')
library(ggplot2)
install.packages('plyr')
library(ggplot2)
install.packages('reshape2')
library(ggplot2)
install.packages('colorspace')
library(ggplot2)
install.packages('scales')
library(ggplot2)
data(iris)
library(ggplot2)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
library(caret)
install.packages('caret')
library(caret)
library(caret)
install.packages('iterator')
library(caret)
install.packages('iterators')
library(caret)
install.packages('foreach')
library(caret)
install.packages('brglm')
library(caret)
install.packages('gtools')
library(caret)
install.packages('minqa')
install.packages("caret")
library(caret)
install.packages("nloptr")
library(caret)
install.packages("lme4")
library(caret)
install.packages("SparseM")
library(caret)
install.packages("qyantreg")
install.packages("quantreg")
library(caret)
install.packages("car")
library(caret)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
modFit<-train(Species~.,data=training,method='rf',prox=TRUE)
install.packages('e1071')
install.packages('randomForest')
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
modFit<-train(Species~.,data=training,method='rf',prox=TRUE)
library(caret)
modFit<-train(Species~.,data=training,method='rf',prox=TRUE)
modFit
modFit$finalModel
getTree(modFit$finalModel,k=1)
getTree(modFit$finalModel,k=2)
getTree(modFit$finalModel,k=2)
modFit$finalModel$prox
pred<-predict(modFir,testing)
pred<-predict(modFit,testing)
testing$predRight
testing
testing$predRight<- pred==testing$Species
pred
head(testing)
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
library(ggplot2)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
install.packages("proto")
install.packages("proto")
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
install.packages("labeling")
install.packages("labeling")
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
library(ggplot2)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
library(ggplot2)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing)
install.packages(c("manipulate", "RCurl", "stringr"))
install.packages(c("manipulate", "RCurl", "stringr"))
install.packages(c("manipulate", "RCurl", "stringr"))
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain<-createDataPartition(segmentationOriginal,p=0.6)
head(segmentationOriginal)
head(segmentationOriginal$case)
head(segmentationOriginal$cases)
head(segmentationOriginal$Case)
train<-segmentationOriginal[segmentationOriginal==Train,]
train<-segmentationOriginal[segmentationOriginal=='Train',]
sum(train)
train$Case
train<-segmentationOriginal[segmentationOriginal$Case==Train,]
train<-segmentationOriginal[segmentationOriginal$Case=='Train',]
train$Case
test<-segmentationOriginal[segmentationOriginal$Case=='Test',]
set.seed(125)
modFit<-train(Class~.,data=train)
modFit<-train(Class~.,data=train,method='CART')
modFit<-train(Class~.,data=train,method='cart')
modFit<-train(Class~.,data=train)
set.seed(125)
modFit<-train(Class~.,data=train,method='rf')
set.seed(125)
modFit<-train(Class~.,data=train,method='rpart')
modFit
print(modFit$finalModel)
plot(modFut$finalModel,uniform=TRUE)
plot(modFit$finalModel,uniform=TRUE)
library(pgmm)
install.packages('pgmm')
data(olive)
library(pgmm)
data(olive)
olive=olive[,-1]
head(olive)
olive$Area
modFit<-train(Area~.,data=olive,method='rpart')
modFit<-train(Area~.,data=olive,method='rpart')
modFit
?predict
predict(as.data.frame(t(colMeans(olive))),modFit)
predict(modFit,as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train=sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA=SAheart[train,]
testSA=SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit<-train(chd~age+alchohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
modFit<-train(chd~age+alchohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass= function(values,prediction){sum(((prediction>0.5)*1)!=values)/length(values)}
missClass(trainSA,modFit)
missClass(trainSA,modFit)
modFit
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
modFit<-train(y~.,data=vowel.train,method='rf')
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method='rf')
modFir
modFit
modFit$Gini
modFit[1]
modFit[2]
modFit[3]
modFit[4]
modFit[5]
modFit[6]
modFit[7]
modFit[8]
modFit[9]
modFit[10]
?varImp
varImp(modFit)
varImp(modFit)
varImp(modFit)
varImp(modFit$finalmodel)
varImp(modFit$finalModel)
model$finalModel
modFit$finalModel
varImp(modFit$finalmodel)
varImp(modFit$finalModel)
modFit<-train(y~.,data=vowel.train,method='rf',importance=T)
varImp(modFit$finalModel)
varImp(modFit)
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method='rf',importance=T)
varImp(modFit)
varImp(modFit$finalModel)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method='rf',importance=T)
varImp(modFit$finalModel)
varImp(modFit)
vowel.train$y
vowel.train$y[1,]
varImp(modFit)[1,]
dim(varImp(modFit))
varImp(modFit)
varImp.randomForest(modFit)
varImp.RandomForest(modFit)
install.packages('party')
library(randomForest);library(party)
varImp.RandomForest(modFit)
varImp.randomForest(modFit)
varImp(modFit,competes=T)
varImp(modFit,competes=F)
varImp(modFit,competes=F)
varImp(modFit,useModel='rf')
varImp(modFit,useModel=T)
varImp(modFit)$1
varImp(modFit)$x.1
x<-varImp(modFit)
x[1]
x[2]
x[3]
x[1][1]
x[[1]]
x[[1]][1]
sum(x[[1]][1,])
mean(x[[1]][1,])
sum(x[[1]][1,])
sum(x[[1]][2,])
x[[1]][2,]
x
x<-varImp(modFit$finalModel)
sum(x[[1]][1,])
x
x[1,]
sum(x[1,])
sum(x[2,])
sum(x[3,])
?train
randomForest(vowel.train,importance=TRUE)
modFit=randomForest(vowel.train,importance=TRUE)
x<-varImp(modFit$finalModel)
x<-varImp(modFit)
x
modFit
vowel.train$y
modFit=randomForest(y~.,data=vowel.train,importance=TRUE)
x<-varImp(modFit)
x
sum(x[1,])
sum(x[2,])
set.seed(33833)
modFit=randomForest(y~.,data=vowel.train,importance=TRUE)
x<-varImp(modFit)
sum(x[1,])
sum(x[2,])
head(vowel.train)
vowel.train$y
x
?varImo
?varImp
x<-varImp(modFit,nonpara=T)
x
x<-varImp(modFit,nonpara=F)
x
?varImp.randomForest
x<-varImp.randomForest(modFit,nonpara=F)
importance(modFit)
setwd("~/GitHub/FlippedData")
library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history?course_id=9")
library(jsonlite)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
install.packages("httr")
install.packages("ROAuth")
install.packages('jsonlite')
library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history?course_id=9")
library(jsonlite)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
library(httr)
library(ROAuth)
install.packages('bitops')
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history?course_id=9")
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history?course_id=9&start_date=2015-04-01&end_date=2015-04-02")
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9")
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9")
library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9&start_date=2015-04-01&end_date=2015-04-30")
library(jsonlite)
?GET
